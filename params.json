{
  "name": "Securescala",
  "tagline": "Scala Embedding of Secure Computations",
  "body": "Cloud computing offers an attractive and cost-efficient computing platform and hence it has been widely adopted by the industry and the government. At the same time, cloud computing poses a serious security challenge because sensitive data must often be outsourced to third party entities that can access the data and perform computations on them.\r\n\r\nPartial homomorphic encryption is promising for secure computation, since it allows programs to be executed over encrypted data. Despite advances in cryptographic techniques have improved the expressivity of such programs, integration with mainstream languages has seen little progress. To this end, we present SecureScala, a domain-specific language in Scala that allows expressing secure programs without requiring any cryptographic knowledge. SecureScala is based on a novel combination of free monads and free applicative functors and supports parallel execution and static analyzability. We evaluate our approach through several case studies, demonstrate its expressivity, and show that it incurs in limited performance overhead.\r\n\r\nCloud computing offers on-demand provisioning of resources, seemingly unlimited scalability and other desirable properties, e.g., fault tolerance, minimal maintenance and cost reduction. To take advantage of these opportunities, the program representing a computation at hand and the associated data is uploaded into the cloud and executed there. Moving computations to the cloud, however, forces developers to face a number of security challenges. While the cloud is a viable approach for non-sensitive and public data, it is problematic for scenarios where data is sensitive, requiring protection from both adversaries and the cloud provider. Traditional encryption targeted to protect data while passing communication channels does not offer a solution for the cloud-based computation scenario because the program running on the remote hardware is not allowed to decrypt the data during the execution plain text data would be available to the owners of the remote host.\r\n\r\nHomomorphic encryption schemes allow computations over encrypted data. Hence, private data can be uploaded to the cloud and processed in the encrypted form, without leaking information. Available homomorphic encryption schemes differ in the operations they support. Fully homomorphic encryption schemes (FHE) support at least multiplication and addition, from which all other operations can be derived. While in theory FHE seems to be the ulti- mate solution to the problem of computing over encrypted data, the computational overhead makes it unviable in practice. Partial homomorphic encryption (PHE) schemes are less expressive they support computation over encrypted data with respect to specific operations, but in contrast to FHE, exhibit acceptable performance. Examples of such schemes are Paillier (addition), ElGamal (multiplication), OPE (order comparisons) and AES (equality comparisons).\r\n\r\nPHE schemes have been used in several systems to provide practical and provable security. Yet, these approaches adopt special-purpose languages, such as SQL or PigLatin to specify computations. A PHE embedding in a general-purpose language that enables reuse of existing libraries, fostering modularity and composition of secure computations, is still open research.\r\n\r\nTo fill this gap, we present SecureScala, an embedded domain-specific language (DSL) for Scala, that allows de- velopers to write computations over encrypted data without requiring sophisticated cryptographic knowledge, without forfeiting integration with a general-purpose language. SecureScala is based on a novel combination of a well known approach using free monads and more recent research on free applicative functors. While applicative functors are less expressive than monads, the latter suffer from the lack of static analyzability and do not allow implicit parallelism. The resulting DSL allows programmers to combine these styles, retaining the benefits of both. Since each PHE scheme supports only a limited set of operations, conversions transparent to the user allow to express programs that include unsupported operations. Different interpreters allow processing locally for testing purposes, on remote hardware in a distributed fashion, or with an optional variety of optimization such as implicit parallelism and transformations achieved via static analysis.\r\n\r\n* We evaluate SecureScala demonstrating the benefits of embedding a DSL into a general-purpose language for secure computation. Our scenarios include queries over encrypted event streams integrating with the complex event processing engine Esper and graphical user interfaces using encrypted data based on the RxScala reactive programming framework. More specifically, we make the following contributions:\r\n* We analyze techniques for developing an embedded DSL for computations over encrypted data in Scala, contrasting a DSL using free monads with another using free applicative functors.\r\n* We combine the two DSLs into SecureScala to get the best of both approaches by allowing programs to depend on previous effects, still exploiting implicit parallelism and static analyzability for the applicative parts.\r\n* We evaluate SecureScala with case studies and benchmarks that show the performance of our solution and demonstrate the interaction with existing libraries due to PHE support integrated into a general-purpose language.\r\n\r\nWe structure this paper starting with an overview of our approach in Section 2 and then construct SecureScala in steps in Section 3, Section 4 and Section 5. We show an em- pirical evaluation in Section 6, we contrast our solution with related work in Section 7 before concluding in Section 8.\r\n\r\n### Functionality\r\n\r\n```scala\r\ndef wordCountText(e: EncStr): CryptoM[List[(OpeStr,Int)]] = \r\n              e.split(\"\"\"\\s+\"\"\") >>= wordCount_\r\n\r\ndef wordCount_(es: IList[EncStr]): Crypto[List[(OpeStr,Int)]] = \r\n              es.traverse(toOpeStr).map(\r\n                _.groupBy(x => x).map(_.length).toList)\r\n ```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Academic publications\r\n* Markus Hauck, Savvas Savvides, Patrick Eugster, Mira Mezini and Guido Salvaneschi _SecureScala: Scala Embedding of Secure Computations_ 2016 7th ACM SIGPLAN Symposium on Scala [[pdf]](http://www.guidosalvaneschi.com/attachments/papers/2016_SecureScala-Scala-Embedding-of-Secure-Computations_pdf.pdf)\r\n* Markus Hauck _A Platform for Secure Distributed Programming_ Master Thesis, TU Darmstadt, 2015\r\n\r\n### About\r\nSecurescala is a project at the Software Technology Group - Technical University of Darmstadt, Germany. Many people contributed to the project:",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}